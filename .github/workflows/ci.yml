name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    name: Test on ${{ matrix.os }} with Java ${{ matrix.java }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        java: [17, 21]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java }}
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run tests
        run: mvn clean test -B -Djava.awt.headless=true -Dmaven.test.failure.ignore=true -Dci=true

      - name: Run all tests (including unstable ones)
        run: mvn clean test -B -Djava.awt.headless=true -Dmaven.test.failure.ignore=true
        continue-on-error: true

      - name: Generate test report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Test Results (${{ matrix.os }}, Java ${{ matrix.java }})
          path: target/surefire-reports/*.xml
          reporter: java-junit
          fail-on-error: false

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.os }}-java${{ matrix.java }}
          path: |
            target/surefire-reports/
            target/site/jacoco/

      - name: Comment test results on PR
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always() && github.event_name == 'pull_request'
        with:
          files: |
            target/surefire-reports/*.xml

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run tests with coverage
        run: mvn clean test jacoco:report -B -Djava.awt.headless=true -Dmaven.test.failure.ignore=true -Dci=true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./target/site/jacoco/jacoco.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  build-and-package:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [test, code-quality]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build and package
        run: mvn clean package -DskipTests -B

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            target/*.jar
            target/site/

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build-and-package

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run integration tests
        run: mvn clean verify -B -Djava.awt.headless=true -Dtest="**/*IntegrationTest,**/*EndToEndTest" -Dmaven.test.failure.ignore=true

      - name: Upload integration test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: target/surefire-reports/

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run performance tests
        run: mvn clean test -B -Djava.awt.headless=true -Dtest="**/*PerformanceTest" -Dmaven.test.failure.ignore=true

      - name: Upload performance test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-test-results
          path: target/surefire-reports/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run OWASP Dependency Check
        run: mvn dependency-check:check -B
        continue-on-error: true

      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-scan-results
          path: target/dependency-check-report.html

  publish-test-report:
    name: Publish Test Report
    runs-on: ubuntu-latest
    needs: [test, integration-tests]
    if: always()

    steps:
      - name: Download all test artifacts
        uses: actions/download-artifact@v3

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v4
        if: always()
        with:
          report_paths: "**/target/surefire-reports/TEST-*.xml"
          check_name: "Test Results Summary"
          fail_on_failure: true
          require_tests: true

      - name: Create test summary
        if: always()
        run: |
          echo "## 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Execution Status" >> $GITHUB_STEP_SUMMARY

          # Count test files
          TOTAL_TESTS=$(find . -name "TEST-*.xml" -exec grep -h "tests=" {} \; | sed 's/.*tests="\([0-9]*\)".*/\1/' | awk '{sum += $1} END {print sum}')
          TOTAL_FAILURES=$(find . -name "TEST-*.xml" -exec grep -h "failures=" {} \; | sed 's/.*failures="\([0-9]*\)".*/\1/' | awk '{sum += $1} END {print sum}')
          TOTAL_ERRORS=$(find . -name "TEST-*.xml" -exec grep -h "errors=" {} \; | sed 's/.*errors="\([0-9]*\)".*/\1/' | awk '{sum += $1} END {print sum}')
          TOTAL_SKIPPED=$(find . -name "TEST-*.xml" -exec grep -h "skipped=" {} \; | sed 's/.*skipped="\([0-9]*\)".*/\1/' | awk '{sum += $1} END {print sum}')

          echo "- **Total Tests:** ${TOTAL_TESTS:-0}" >> $GITHUB_STEP_SUMMARY
          echo "- **Passed:** $((${TOTAL_TESTS:-0} - ${TOTAL_FAILURES:-0} - ${TOTAL_ERRORS:-0} - ${TOTAL_SKIPPED:-0}))" >> $GITHUB_STEP_SUMMARY
          echo "- **Failed:** ${TOTAL_FAILURES:-0}" >> $GITHUB_STEP_SUMMARY
          echo "- **Errors:** ${TOTAL_ERRORS:-0}" >> $GITHUB_STEP_SUMMARY
          echo "- **Skipped:** ${TOTAL_SKIPPED:-0}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${TOTAL_FAILURES:-0}" -eq 0 ] && [ "${TOTAL_ERRORS:-0}" -eq 0 ]; then
            echo "✅ All tests passed successfully!" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some tests failed. Please check the detailed report." >> $GITHUB_STEP_SUMMARY
          fi
